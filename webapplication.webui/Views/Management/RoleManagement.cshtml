<div class="py-5">
  <div class="d-flex flex-stack flex-wrap mb-5">
    <div class="d-flex align-items-center position-relative my-1 mb-2 mb-md-0">
      <i class="ki-duotone ki-magnifier fs-1 position-absolute ms-6"><span class="path1"></span><span class="path2"></span></i> <input type="text" data-kt-docs-table-filter="search" class="form-control form-control-solid w-250px ps-15" placeholder="Arama" />
    </div>
    <div class="d-flex justify-content-end" data-kt-docs-table-toolbar="base">
      <button type="button" class="btn btn-sm btn-primary" data-bs-toggle="modal" data-bs-target="#create_role_modal"><i class="ki-duotone ki-plus fs-2"></i>Rol Ekle</button>
    </div>
    <div class="d-flex justify-content-end align-items-center d-none" data-kt-docs-table-toolbar="selected">
      <div class="fw-bold me-5"><span class="me-2" data-kt-docs-table-select="selected_count"></span> Selected</div>
      <button type="button" class="btn btn-sm btn-danger" data-kt-docs-table-select="delete_selected">Seçilenleri Sil</button>
    </div>
  </div>
  <table id="rolelist_table" class="table align-middle table-row-dashed fs-6 gy-5">
    <thead>
      <tr class="text-start text-gray-400 fw-bold fs-7 text-uppercase gs-0">
        <th class="w-10px pe-2">
          <div class="form-check form-check-sm form-check-custom form-check-solid me-3">
            <input class="form-check-input" type="checkbox" data-kt-check="true" data-kt-check-target="#rolelist_table .form-check-input" value="1" />
          </div>
        </th>
        <th>Rol Adı</th>
        <th>Concurrency Stamp</th>
        <th class="text-end min-w-100px">Aksiyonlar</th>
      </tr>
    </thead>
    <tbody class="text-gray-600 fw-semibold"></tbody>
  </table>
</div>
<div class="modal fade" tabindex="-1" id="create_role_modal">
  <div class="modal-dialog">
    <form id="create_role_form" data-menu-id class="modal-content position-absolute">
      <div class="modal-header px-3 py-1">
        <h5 class="modal-title"></h5>
        <div class="btn btn-icon btn-sm btn-active-light-primary ms-2" data-bs-dismiss="modal" aria-label="Close">
          <i class="ki-duotone ki-cross fs-2x"><span class="path1"></span><span class="path2"></span></i>
        </div>
      </div>
      <div class="modal-body p-3">
        <div class="card-body">
          <div class="position-relative mb-3">
            <label class="required form-label form-label-sm">Rol Adı</label>
            <input type="text" required autocomplete="off" class="form-control form-control-solid form-control-sm" name="Name" placeholder="Rol" />
          </div>
        </div>
      </div>
      <div class="modal-footer p-3">
        <button type="submit" class="btn btn-sm btn-primary">Kaydet</button>
      </div>
    </form>
  </div>
</div>
<div class="modal fade" tabindex="-1" id="edit_role_modal">
  <div class="modal-dialog">
    <form id="edit_role_form" data-menu-id class="modal-content position-absolute">
      <div class="modal-header px-3 py-1">
        <h5 class="modal-title"></h5>
        <div class="btn btn-icon btn-sm btn-active-light-primary ms-2" data-bs-dismiss="modal" aria-label="Close">
          <i class="ki-duotone ki-cross fs-2x"><span class="path1"></span><span class="path2"></span></i>
        </div>
      </div>
      <div class="modal-body p-3">
        <div class="card-body">
          <div class="position-relative mb-3">
            <label class="required form-label form-label-sm">Rol Adı</label>
            <input type="text" required autocomplete="off" class="form-control form-control-solid form-control-sm" name="Name" placeholder="Rol" />
            <input type="hidden" name="Id">
          </div>
        </div>
      </div>
      <div class="modal-footer p-3">
        <button type="submit" class="btn btn-sm btn-primary">Kaydet</button>
      </div>
    </form>
  </div>
</div>
<script>
    $('[name="Name"]').on("input", function() {
        var value = $(this).val();
        value = value.replace(/\s+/g, "").toLowerCase();
        $(this).val(value);
    });
    $(document).ready(function(){
        activateDraggableModal('create_role_modal');
        activateDraggableModal('edit_role_modal');
    });
    $('#create_role_form').on('submit',function(e){
        e.preventDefault();
        if (!checkInputs("create_role_form")) return;
        var formData = new FormData(this);
        $.ajax({
            url:'/Management/SaveRole',
            type: 'post',
            data: formData,
            processData: false,
            contentType: false,
        }).then(function (result) {
            if (result) {
                successAlert("Rol Başarıyla Oluşturuldu");
                removeInputValue("create_role_form");
                $('#create_role_modal').modal('hide');
            } else {
                errorAlert("Rol Oluşturulamadı");
                $('#create_role_modal').modal('hide');
            }
        });
    });
    $('#edit_role_form').on('submit',function(e){
        e.preventDefault();
        if(!checkInputs('edit_role_form')) return;
        var formData = new FormData(this);
        $.ajax({
            url:'/Management/EditRole',
            type: 'post',
            data: formData,
            processData: false,
            contentType: false,
        }).then(function (result) {
            if (result) {
                successAlert("Rol Başarıyla Düzenlendi");
                removeInputValue("edit_role_form");
                $('#edit_role_modal').modal('hide');
            } else {
                errorAlert("Rol Düzenlenemedi");
                $('#edit_role_modal').modal('hide');
            }
        });
    });
    "use strict";
  var KTDatatablesServerSide = function () {
      var table;
      var dt;
      var initDatatable = function () {
          dt = $("#rolelist_table").DataTable({
              searchDelay: 500,
              processing: true,
              serverSide: true,
              order: [[1, 'desc']],
              select: {
                  style: 'multi',
                  selector: 'td:first-child input[type="checkbox"]',
                  className: 'row-selected'
              },
              ajax: {
                  url: "/Management/GetRolesObject",
                  data: function (d) {
                        d.searchValue = d.search.value;
                        d.start = d.start || 0;
                        d.length = d.length || 10;
                        d.order = d.order || [];
                        d.sortColumn = d.order[0].column;
                        d.sortColumnDir = d.order[0].dir;
                        d.columnName = d.columns[d.sortColumn].data;
                    }
              },
              columns: [
                  { data: 'id' },
                  { data: 'name' },
                  { data: 'concurrencyStamp' },
                  { data: null },
              ],
              columnDefs: [
                  {
                      targets: 0,
                      orderable: false,
                      render: function (data) {
                          return `
                              <div class="form-check form-check-sm form-check-custom form-check-solid">
                                  <input class="form-check-input" type="checkbox" value="${data}" />
                              </div>`;
                      }
                  },
                  {
                      targets: -1,
                      data: null,
                      orderable: false,
                      className: 'text-end',
                      render: function (data, type, row) {
                          return `
                              <a href="#" class="btn btn-light btn-active-light-primary btn-sm" data-kt-menu-trigger="click" data-kt-menu-placement="bottom-end" data-kt-menu-flip="top-end">
                                  Aksiyonlar
                                  <span class="svg-icon fs-5 m-0">
                                      <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="24px" height="24px" viewBox="0 0 24 24" version="1.1">
                                          <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                                              <polygon points="0 0 24 0 24 24 0 24"></polygon>
                                              <path d="M6.70710678,15.7071068 C6.31658249,16.0976311 5.68341751,16.0976311 5.29289322,15.7071068 C4.90236893,15.3165825 4.90236893,14.6834175 5.29289322,14.2928932 L11.2928932,8.29289322 C11.6714722,7.91431428 12.2810586,7.90106866 12.6757246,8.26284586 L18.6757246,13.7628459 C19.0828436,14.1360383 19.1103465,14.7686056 18.7371541,15.1757246 C18.3639617,15.5828436 17.7313944,15.6103465 17.3242754,15.2371541 L12.0300757,10.3841378 L6.70710678,15.7071068 Z" fill="currentColor" fill-rule="nonzero" transform="translate(12.000003, 11.999999) rotate(-180.000000) translate(-12.000003, -11.999999)"></path>
                                          </g>
                                      </svg>
                                  </span>
                              </a>
                              <div class="menu menu-sub menu-sub-dropdown menu-column menu-rounded menu-gray-600 menu-state-bg-light-primary fw-bold fs-7 w-125px py-4" data-kt-menu="true">
                                  <div class="menu-item px-3">
                                      <a href="#" class="menu-link px-3" data-kt-docs-table-filter="edit_row">
                                          Düzenle
                                      </a>
                                  </div>
                                  <div class="menu-item px-3">
                                      <a href="#" class="menu-link px-3" data-kt-docs-table-filter="delete_row">
                                          Sil
                                      </a>
                                  </div>
                              </div>
                          `;
                      },
                  },
              ],
          });
          table = dt.$;
          // Re-init functions on every table re-draw -- more info: https://datatables.net/reference/event/draw
          dt.on('draw', function () {
              initToggleToolbar();
              toggleToolbars();
              handleDeleteRows();
              handleEditRows();
              KTMenu.createInstances();
          });
      }
      // Search Datatable --- official docs reference: https://datatables.net/reference/api/search()
      var handleSearchDatatable = function () {
          const filterSearch = document.querySelector('[data-kt-docs-table-filter="search"]');
          filterSearch.addEventListener('keyup', function (e) {
              dt.search(e.target.value).draw();
          });
      }
      var handleEditRows = () =>{
        const editButtons = document.querySelectorAll('[data-kt-docs-table-filter="edit_row"]');
        editButtons.forEach(d => {
            // Delete button on click
            d.addEventListener('click', function (e) {
                e.preventDefault();
                // Select parent row
                const parent = e.target.closest('tr');
                // Get customer name
                const roleName = parent.querySelectorAll('td')[1].innerText;
                const roleId = parent.querySelector('[type="checkbox"]').value;
                $('#edit_role_modal').modal('show');
                $('#edit_role_modal [name="Name"]').val(roleName);
                $('#edit_role_modal [name="Id"]').val(roleId);
            })
        });
      }
      // Delete customer
      var handleDeleteRows = () => {
          // Select all delete buttons
          const deleteButtons = document.querySelectorAll('[data-kt-docs-table-filter="delete_row"]');
          deleteButtons.forEach(d => {
              // Delete button on click
              d.addEventListener('click', function (e) {
                  e.preventDefault();
                  // Select parent row
                  const parent = e.target.closest('tr');
                  // Get customer name
                  const roleName = parent.querySelectorAll('td')[1].innerText;
                  Swal.fire({
                      text: roleName + " isimli rolü silmek istediğinize emin misiniz?",
                      icon: "warning",
                      showCancelButton: true,
                      buttonsStyling: false,
                      confirmButtonText: "Evet, Sil!",
                      cancelButtonText: "Hayır, Vazgeç",
                      customClass: {
                          confirmButton: "btn fw-bold btn-sm btn-danger",
                          cancelButton: "btn fw-bold btn-sm btn-active-light-primary"
                      }
                  }).then(function (result) {
                      if (result.value) {
                        $.ajax({
                            url: '/Management/RemoveRoleByName',
                            type: 'POST',
                            data: {roleName : roleName}
                        }).then(function(){
                            Swal.fire({
                                text: roleName + " isimli Rol Silindi !",
                                icon: "success",
                                buttonsStyling: false,
                                confirmButtonText: "Tamam",
                                customClass: {
                                    confirmButton: "btn fw-bold btn-primary",
                                }
                            });
                            dt.draw();
                        });
                      } else if (result.dismiss === 'cancel') {
                          Swal.fire({
                              text: roleName + " isimli rol silinmedi",
                              icon: "error",
                              buttonsStyling: false,
                              confirmButtonText: "Tamam",
                              customClass: {
                                  confirmButton: "btn btn-sm fw-bold btn-primary",
                              }
                          });
                      }
                  });
              })
          });
      }
      // Init toggle toolbar
      var initToggleToolbar = function () {
          // Toggle selected action toolbar
          // Select all checkboxes
          const container = document.querySelector('#rolelist_table');
          const checkboxes = container.querySelectorAll('[type="checkbox"]');
          // Select elements
          const deleteSelected = document.querySelector('[data-kt-docs-table-select="delete_selected"]');
          // Toggle delete selected toolbar
          checkboxes.forEach(c => {
              // Checkbox on click event
              c.addEventListener('click', function () {
                  setTimeout(function () {
                      toggleToolbars();
                  }, 50);
              });
          });
          // Deleted selected rows
          deleteSelected.addEventListener('click', function () {
              // SweetAlert2 pop up --- official docs reference: https://sweetalert2.github.io/
              Swal.fire({
                  text: "Are you sure you want to delete selected customers?",
                  icon: "warning",
                  showCancelButton: true,
                  buttonsStyling: false,
                  confirmButtonText: "Yes, delete!",
                  cancelButtonText: "No, cancel",
                  customClass: {
                      confirmButton: "btn fw-bold btn-danger",
                      cancelButton: "btn fw-bold btn-active-light-primary"
                  },
              }).then(function (result) {
                  if (result.value) {
                      // Simulate delete request -- for demo purpose only
                      Swal.fire({
                          text: "Deleting selected customers",
                          icon: "info",
                          buttonsStyling: false,
                          showConfirmButton: false,
                          timer: 2000
                      }).then(function () {
                          Swal.fire({
                              text: "You have deleted all selected customers!.",
                              icon: "success",
                              buttonsStyling: false,
                              confirmButtonText: "Ok, got it!",
                              customClass: {
                                  confirmButton: "btn fw-bold btn-primary",
                              }
                          }).then(function () {
                              // delete row data from server and re-draw datatable
                              dt.draw();
                          });
                          // Remove header checked box
                          const headerCheckbox = container.querySelectorAll('[type="checkbox"]')[0];
                          headerCheckbox.checked = false;
                      });
                  } else if (result.dismiss === 'cancel') {
                      Swal.fire({
                          text: "Selected customers was not deleted.",
                          icon: "error",
                          buttonsStyling: false,
                          confirmButtonText: "Ok, got it!",
                          customClass: {
                              confirmButton: "btn fw-bold btn-primary",
                          }
                      });
                  }
              });
          });
      }
      // Toggle toolbars
      var toggleToolbars = function () {
          // Define variables
          const container = document.querySelector('#rolelist_table');
          const toolbarBase = document.querySelector('[data-kt-docs-table-toolbar="base"]');
          const toolbarSelected = document.querySelector('[data-kt-docs-table-toolbar="selected"]');
          const selectedCount = document.querySelector('[data-kt-docs-table-select="selected_count"]');
          // Select refreshed checkbox DOM elements
          const allCheckboxes = container.querySelectorAll('tbody [type="checkbox"]');
          // Detect checkboxes state & count
          let checkedState = false;
          let count = 0;
          // Count checked boxes
          allCheckboxes.forEach(c => {
              if (c.checked) {
                  checkedState = true;
                  count++;
              }
          });
          // Toggle toolbars
          if (checkedState) {
              selectedCount.innerHTML = count;
              toolbarBase.classList.add('d-none');
              toolbarSelected.classList.remove('d-none');
          } else {
              toolbarBase.classList.remove('d-none');
              toolbarSelected.classList.add('d-none');
          }
      }
      // Public methods
      return {
          init: function () {
              initDatatable();
              handleSearchDatatable();
              initToggleToolbar();
              handleDeleteRows();
              handleEditRows();
          }
      }
  }();
  // On document ready
  KTUtil.onDOMContentLoaded(function () {
      KTDatatablesServerSide.init();
  });
</script>
